generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Space {
  id               String    @id @default(cuid())
  name             String
  credit           Int?
  deletedTime      DateTime? @map("deleted_time")
  createdTime      DateTime  @default(now()) @map("created_time")
  createdBy        String    @map("created_by")
  lastModifiedBy   String?   @map("last_modified_by")
  lastModifiedTime DateTime? @updatedAt @map("last_modified_time")
  baseGroup        Base[]

  @@map("space")
}

model Base {
  id               String      @id @default(cuid())
  spaceId          String      @map("space_id")
  name             String
  order            Float
  deletedTime      DateTime?   @map("deleted_time")
  createdTime      DateTime    @default(now()) @map("created_time")
  createdBy        String      @map("created_by")
  lastModifiedBy   String?     @map("last_modified_by")
  lastModifiedTime DateTime?   @updatedAt @map("last_modified_time")
  space            Space       @relation(fields: [spaceId], references: [id])
  tables           TableMeta[]

  @@index([order])
  @@map("base")
}

model TableMeta {
  id               String           @id @default(cuid())
  baseId           String           @map("base_id")
  name             String
  description      String?
  dbTableName      String           @map("db_table_name")
  order            Float
  createdTime      DateTime         @default(now()) @map("created_time")
  lastModifiedTime DateTime?        @updatedAt @map("last_modified_time")
  deletedTime      DateTime?        @map("deleted_time")
  createdBy        String           @map("created_by")
  lastModifiedBy   String?          @map("last_modified_by")
  fields           Column[]
  records          Record[]
  rolePermissions  RolePermission[]
  base             Base             @relation(fields: [baseId], references: [id])

  @@index([order])
  @@map("table_meta")
}

model Column {
  id                  String    @id @default(cuid())
  name                String
  description         String?
  options             String?
  type                String
  cellValueType       String    @map("cell_value_type")
  isMultipleCellValue Boolean?  @map("is_multiple_cell_value")
  dbFieldType         String    @map("db_field_type")
  dbFieldName         String    @map("db_field_name")
  notNull             Boolean?  @map("not_null")
  unique              Boolean?
  isPrimary           Boolean?  @map("is_primary")
  isComputed          Boolean?  @map("is_computed")
  isLookup            Boolean?  @map("is_lookup")
  isPending           Boolean?  @map("is_pending")
  hasError            Boolean?  @map("has_error")
  lookupLinkedFieldId String?   @map("lookup_linked_field_id")
  lookupOptions       String?   @map("lookup_options")
  tableId             String    @map("table_id")
  order               Float
  createdTime         DateTime  @default(now()) @map("created_time")
  lastModifiedTime    DateTime? @updatedAt @map("last_modified_time")
  deletedTime         DateTime? @map("deleted_time")
  createdBy           String    @map("created_by")
  lastModifiedBy      String?   @map("last_modified_by")
  table               TableMeta @relation(fields: [tableId], references: [id])

  @@index([lookupLinkedFieldId])
  @@map("columns")
}

model Record {
  id               String    @id @default(cuid())
  tableId          String    @map("table_id")
  data             Json?
  createdTime      DateTime  @default(now()) @map("created_time")
  createdBy        String    @map("created_by")
  lastModifiedTime DateTime? @updatedAt @map("last_modified_time")
  lastModifiedBy   String?   @map("last_modified_by")
  table            TableMeta @relation(fields: [tableId], references: [id])

  @@map("record")
}
